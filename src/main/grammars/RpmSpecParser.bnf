{
  parserClass="com.carbonblack.intellij.rpmspec.parser.RpmSpecParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="RpmSpec"
  psiImplClassSuffix="Impl"
  psiPackage="com.carbonblack.intellij.rpmspec.psi"
  psiImplPackage="com.carbonblack.intellij.rpmspec.psi.impl"

  elementTypeHolderClass="com.carbonblack.intellij.rpmspec.psi.RpmSpecTypes"
  elementTypeClass="com.carbonblack.intellij.rpmspec.psi.RpmSpecElementType"
  tokenTypeClass="com.carbonblack.intellij.rpmspec.psi.RpmSpecTokenType"

    tokens = [
        space             = 'regexp:\s+'

        LBRACE            =  '{'
        RBRACE            =  '}'
        LPAREN            =  '('
        RPAREN            =  ')'
        COLON             =  ':'
        PERCENT           =  '%'
        ESCAPED_PERCENT   =  '%%'
        EXCLAMATION_MARK  =  '!'
        QUESTION_MARK     =  '?'
        MINUS             =  '-'
        LT                =  '<'
        GT                =  '>'
        BACKSLASH         =  '\'
    ]
}

rpmSpecFile ::= EOL* packageBody section*

private section ::= (packageSection|descriptionSection|changelogSection|otherSections|filesSection)
private notMacro ::= CODE '{' wordOrMacro+ '}'
private anything ::= (wordOrMacro|'?'|'!'|'('|')'|'<'|'>'|'{'|'}'|'\')
private anyWord ::= (IDENTIFIER|BOOL_LITERAL|FLOAT_LITERAL|INTEGER_LITERAL|CODE|':'|'%%'|'-')
private wordOrMacro ::= (macroParam|shellCommand|fullMacro|notMacro|anyWord)

private meta optionalBrackets ::= <<nestedBrackets <<param>>>> | <<param>>
private meta nestedBrackets ::= '{' (<<nestedBrackets <<param>>>> | <<param>>) '}'
private macroDefinitionBody ::= ('\' EOL|'%' CODE|wordOrMacro|'('|')'|'<'|'>')
macroDefinition ::= (global|define) IDENTIFIER ('(' anyWord* ')')? <<optionalBrackets macroDefinitionBody+>>+ {pin=1
    implements="com.intellij.psi.PsiNameIdentifierOwner"
    mixin="com.carbonblack.intellij.rpmspec.psi.RpmSpecMacroDefinitionElementImpl"}
macroUndefine ::= undefine macro {pin=1}
macroConditional ::= ('!''?'|'?''!'|'?')
macroBody ::= macroDefinition|multilineMacro|(wordOrMacro|'('|')')+
macroBodySeparator ::= ':'
fullMacro ::= '%' ('{' macroConditional? macro (macroBodySeparator? macroBody)? '}'| macro ('(' anyWord ')')?) {pin=1
    implements="com.carbonblack.intellij.rpmspec.psi.RpmSpecFullMacroElement"
    mixin="com.carbonblack.intellij.rpmspec.psi.RpmSpecFullMacroElementImpl"}
macro ::= IDENTIFIER {implements=["com.intellij.psi.PsiNameIdentifierOwner" "com.carbonblack.intellij.rpmspec.psi.RpmSpecMacroElement"]
                      mixin="com.carbonblack.intellij.rpmspec.psi.RpmSpecMacroElementImpl"}
macroParam ::= '%' INTEGER_LITERAL {pin=2}

// This definition is a bit of a mess, it's pretty much everything from all the sections jammed in here
private multilineMacroPieces ::= (COMMENT|tag|macroParam|<<ifExpr multilineMacro>>|filesDirective|'<'|'>'|'?'|'!'|'('|')'|'\'|wordOrMacro)*
multilineMacro ::= (multilineMacroPieces EOL+ multilineMacroPieces)+

shellCommand ::= '%' '('  (('\'|'\\') EOL|wordOrMacro|'<'|'>'|'('|'?'|'!'|'\')* ')' {pin=2}

packageSection ::= package wordOrMacro* EOL packageBody {pin=1}
packageBody ::= (COMMENT|EOL|<<ifExpr packageBody>>|fullMacro anything*|macroDefinition|macroUndefine|tag)*

meta ifExpr ::= if anything+ EOL <<param>> section* <<elseBranch <<param>>>>? endIfExpr {pin=1}
meta elseBranch ::= else <<param>> section* {pin=1}
endIfExpr ::= endif

tag ::= IDENTIFIER ('(' IDENTIFIER ')')? ':' tagValue {pin=3
    implements="com.carbonblack.intellij.rpmspec.psi.RpmSpecTagElement"
    mixin="com.carbonblack.intellij.rpmspec.psi.RpmSpecTagElementImpl"}
tagValue ::= anything+

meta genericSection ::= <<param>> anything* EOL genericBody {pin=1}
genericBody ::= (COMMENT|EOL|<<ifExpr genericBody>>|macroDefinition|macroUndefine|anything|CL_HEADER_TOKEN|CL_ITEM_TOKEN|SETUP|filesDirective)*

descriptionSection ::= <<genericSection description>>
otherSections ::= <<genericSection (SHELL_SECTION)>>

filesSection ::= files anything* EOL filesBody {pin=1}
filesBody ::= (filesDirective|COMMENT|EOL|<<ifExpr filesBody>>|macroDefinition|macroUndefine|anything+)*
filesDirective ::= FILES_DIRECTIVE_TOKEN (filesDirective|anything)* {pin=1}

changelogSection ::= changelog changelogBody {pin=1}
changelogBody ::= (EOL|changelogItem)*
changelogItem ::= (changelogHeader EOL changelogEntry*)
changelogHeader ::= CL_HEADER_TOKEN changelogDate changelogAuthor changelogEmail? '-'? changelogVersion? {pin=1}
changelogDate ::= IDENTIFIER IDENTIFIER INTEGER_LITERAL INTEGER_LITERAL
changelogAuthor ::= anyWord+
changelogEmail ::= '<' anyWord+ '>' {pin=1}
changelogVersion ::= anything+
changelogEntry ::= CL_ITEM_TOKEN (anything|EOL)+ {pin=1}
